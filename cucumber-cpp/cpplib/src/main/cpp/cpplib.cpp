/*
 * This C++ source file was generated by the Gradle 'init' task.
 */

#include <iostream>
#include <stdlib.h>
#include <stdio.h>
#include <windows.h>
#include <string.h>
#include <direct.h>
#include <io.h>
#include <fcntl.h>
#include "cpplib.h"

unsigned char ascii_to_vk_shift_table(unsigned char ascii) {
	unsigned char vk;
	static char tt[256];

	tt[')'] = 0x30;
	tt['('] = 0x39;
	tt['&'] = 0x37;
	tt['^'] = 0x36;
	tt['%'] = 0x35;
	tt['$'] = 0x34;
	tt['#'] = 0x33;
	tt['@'] = 0x32;
	tt['!'] = 0x31;
	tt['~'] = 0xC0;
	tt['A'] = 0x41;
	tt['B'] = 0x42;
	tt['C'] = 0x43;
	tt['D'] = 0x44;
	tt['E'] = 0x45;
	tt['F'] = 0x46;
	tt['G'] = 0x47;
	tt['H'] = 0x48;
	tt['I'] = 0x49;
	tt['J'] = 0x4A;
	tt['K'] = 0x4B;
	tt['L'] = 0x4C;
	tt['M'] = 0x4D;
	tt['N'] = 0x4E;
	tt['O'] = 0x4F;
	tt['P'] = 0x50;
	tt['Q'] = 0x51;
	tt['R'] = 0x52;
	tt['S'] = 0x53;
	tt['T'] = 0x54;
	tt['U'] = 0x55;
	tt['V'] = 0x56;
	tt['W'] = 0x57;
	tt['X'] = 0x58;
	tt['Y'] = 0x59;
	tt['Z'] = 0x5A;
	tt['\"'] = 0xDE;
	tt['?'] = 0x6F;
	tt['<'] = 0xBC;
	tt['>'] = 0xBE;
	tt[':'] = 0xBA;
	tt['|'] = 0xDC;

	vk = tt[ascii];
	return vk;
}

unsigned char ascii_to_vk_table(unsigned char ascii) {
	unsigned char vk;
	static char tt[256];

	tt['\n'] = 0x0D;
	tt['\r'] = 0x0D;
	tt['`'] = 0xC0;
	tt['0'] = 0x30;
	tt['1'] = 0x31;
	tt['2'] = 0x32;
	tt['3'] = 0x33;
	tt['4'] = 0x34;
	tt['5'] = 0x35;
	tt['6'] = 0x36;
	tt['7'] = 0x37;
	tt['8'] = 0x38;
	tt['9'] = 0x39;
	tt['a'] = 0x41;
	tt['b'] = 0x42;
	tt['c'] = 0x43;
	tt['d'] = 0x44;
	tt['e'] = 0x45;
	tt['f'] = 0x46;
	tt['g'] = 0x47;
	tt['h'] = 0x48;
	tt['i'] = 0x49;
	tt['j'] = 0x4A;
	tt['k'] = 0x4B;
	tt['l'] = 0x4C;
	tt['m'] = 0x4D;
	tt['n'] = 0x4E;
	tt['o'] = 0x4F;
	tt['p'] = 0x50;
	tt['q'] = 0x51;
	tt['r'] = 0x52;
	tt['s'] = 0x53;
	tt['t'] = 0x54;
	tt['u'] = 0x55;
	tt['v'] = 0x56;
	tt['w'] = 0x57;
	tt['x'] = 0x58;
	tt['y'] = 0x59;
	tt['z'] = 0x5A;
	tt['*'] = 0x6A;
	tt['+'] = 0x6B;
	tt['-'] = 0x6D;
	tt[' '] = 0x20;
	tt['\\'] = 0xDC;
	tt[']'] = 0xDD;
	tt['['] = 0xDB;
	tt['\''] = 0xDE;
	tt['='] = 0xBB;
	tt['/'] = 0x6F;
	tt[','] = 0xBC;
	tt['.'] = 0xBE;
	tt[';'] = 0xBA;

	vk = tt[ascii];
	return vk;
}

std::string CppLib::Library::greeting() {
	return std::string("Hello, World! From C++");
}

std::string CppLib::Library::getClipboard() {
	WCHAR *pchData;
	char *string;
	if (!OpenClipboard(NULL))
		return "";
	HANDLE hClipboardData = GetClipboardData(CF_UNICODETEXT);
	if (hClipboardData) {
		pchData = (WCHAR*) GlobalLock(hClipboardData);
		if (pchData) {
			sprintf(string, "%ls", pchData);
			GlobalUnlock(hClipboardData);
		}
	}
	CloseClipboard();
	return string;
}

void CppLib::Library::sendKey(char mK) {

	INPUT ip;
	int vk = 0;
	int press_shift = 0;

	ip.type = INPUT_KEYBOARD;
	ip.ki.wScan = 0;
	ip.ki.time = 0;
	ip.ki.dwExtraInfo = 0;
	vk = ascii_to_vk_table(mK);
	if (vk == 0) {
		press_shift = 1;
		vk = ascii_to_vk_shift_table(mK);
	}

	if (vk == 0)
		return;

	if (press_shift == 1) {
		ip.ki.wVk = VK_SHIFT;
		ip.ki.dwFlags = 0;
		Sleep(1);
		SendInput(1, &ip, sizeof(INPUT));
	}

	ip.ki.wVk = vk;
	ip.ki.dwFlags = 0;
	Sleep(1);
	SendInput(1, &ip, sizeof(INPUT));

	ip.ki.dwFlags = KEYEVENTF_KEYUP;
	Sleep(1);
	SendInput(1, &ip, sizeof(INPUT));

	if (press_shift == 1) {
		ip.ki.wVk = VK_SHIFT;
		ip.ki.dwFlags = KEYEVENTF_KEYUP;
		Sleep(1);
		SendInput(1, &ip, sizeof(INPUT));
		press_shift = 0;
	}
}

void CppLib::Library::sendCtrlKey(char mK) {
	INPUT arrayKeyBDIn[5];
	arrayKeyBDIn[0].type = INPUT_KEYBOARD;
	arrayKeyBDIn[0].ki.dwExtraInfo = 0;
	arrayKeyBDIn[0].ki.time = 0;
	arrayKeyBDIn[1].type = INPUT_KEYBOARD;
	arrayKeyBDIn[1].ki.dwExtraInfo = 0;
	arrayKeyBDIn[1].ki.time = 0;
	arrayKeyBDIn[2].type = INPUT_KEYBOARD;
	arrayKeyBDIn[2].ki.dwExtraInfo = 0;
	arrayKeyBDIn[2].ki.time = 0;
	arrayKeyBDIn[3].type = INPUT_KEYBOARD;
	arrayKeyBDIn[3].ki.dwExtraInfo = 0;
	arrayKeyBDIn[3].ki.time = 0;

	if (mK == 0)
		return;

	arrayKeyBDIn[0].ki.wVk = VK_CONTROL;
	arrayKeyBDIn[0].ki.wScan = MapVirtualKey(VK_CONTROL, MAPVK_VK_TO_VSC);
	arrayKeyBDIn[0].ki.dwFlags = KEYEVENTF_SCANCODE;

	arrayKeyBDIn[1].ki.wVk = mK;
	arrayKeyBDIn[1].ki.wScan = MapVirtualKey(mK, MAPVK_VK_TO_VSC);
	arrayKeyBDIn[1].ki.dwFlags = KEYEVENTF_SCANCODE;

	arrayKeyBDIn[2].ki.wVk = mK;
	arrayKeyBDIn[2].ki.wScan = MapVirtualKey(mK, MAPVK_VK_TO_VSC);
	arrayKeyBDIn[2].ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	arrayKeyBDIn[3].ki.wVk = VK_CONTROL;
	arrayKeyBDIn[3].ki.wScan = MapVirtualKey(VK_CONTROL, MAPVK_VK_TO_VSC);
	arrayKeyBDIn[3].ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	SendInput(4, arrayKeyBDIn, sizeof(INPUT));
}

void CppLib::Library::sendAltKey(char mK) {
	INPUT arrayKeyBDIn[5];
	arrayKeyBDIn[0].type = INPUT_KEYBOARD;
	arrayKeyBDIn[0].ki.dwExtraInfo = 0;
	arrayKeyBDIn[0].ki.time = 0;
	arrayKeyBDIn[1].type = INPUT_KEYBOARD;
	arrayKeyBDIn[1].ki.dwExtraInfo = 0;
	arrayKeyBDIn[1].ki.time = 0;
	arrayKeyBDIn[2].type = INPUT_KEYBOARD;
	arrayKeyBDIn[2].ki.dwExtraInfo = 0;
	arrayKeyBDIn[2].ki.time = 0;
	arrayKeyBDIn[3].type = INPUT_KEYBOARD;
	arrayKeyBDIn[3].ki.dwExtraInfo = 0;
	arrayKeyBDIn[3].ki.time = 0;

	if (mK == 0)
		return;

	arrayKeyBDIn[0].ki.wVk = VK_MENU;
	arrayKeyBDIn[0].ki.wScan = MapVirtualKey(VK_MENU, MAPVK_VK_TO_VSC);
	arrayKeyBDIn[0].ki.dwFlags = KEYEVENTF_SCANCODE;

	arrayKeyBDIn[1].ki.wVk = mK;
	arrayKeyBDIn[1].ki.wScan = MapVirtualKey(mK, MAPVK_VK_TO_VSC);
	arrayKeyBDIn[1].ki.dwFlags = KEYEVENTF_SCANCODE;

	arrayKeyBDIn[2].ki.wVk = mK;
	arrayKeyBDIn[2].ki.wScan = MapVirtualKey(mK, MAPVK_VK_TO_VSC);
	arrayKeyBDIn[2].ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	arrayKeyBDIn[3].ki.wVk = VK_MENU;
	arrayKeyBDIn[3].ki.wScan = MapVirtualKey(VK_MENU, MAPVK_VK_TO_VSC);
	arrayKeyBDIn[3].ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	SendInput(4, arrayKeyBDIn, sizeof(INPUT));
}

void CppLib::Library::sendShiftSpecial(int mK) {
	INPUT arrayKeyBDIn[5];
	arrayKeyBDIn[0].type = INPUT_KEYBOARD;
	arrayKeyBDIn[0].ki.dwExtraInfo = 0;
	arrayKeyBDIn[0].ki.time = 0;
	arrayKeyBDIn[1].type = INPUT_KEYBOARD;
	arrayKeyBDIn[1].ki.dwExtraInfo = 0;
	arrayKeyBDIn[1].ki.time = 0;
	arrayKeyBDIn[2].type = INPUT_KEYBOARD;
	arrayKeyBDIn[2].ki.dwExtraInfo = 0;
	arrayKeyBDIn[2].ki.time = 0;
	arrayKeyBDIn[3].type = INPUT_KEYBOARD;
	arrayKeyBDIn[3].ki.dwExtraInfo = 0;
	arrayKeyBDIn[3].ki.time = 0;

	if (mK == 0)
		return;

	arrayKeyBDIn[0].ki.wVk = VK_SHIFT;
	arrayKeyBDIn[0].ki.wScan = MapVirtualKey(VK_SHIFT, MAPVK_VK_TO_VSC);
	arrayKeyBDIn[0].ki.dwFlags = KEYEVENTF_SCANCODE;

	arrayKeyBDIn[1].ki.wVk = mK;
	arrayKeyBDIn[1].ki.wScan = MapVirtualKey(mK, MAPVK_VK_TO_VSC);
	arrayKeyBDIn[1].ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_EXTENDEDKEY;

	arrayKeyBDIn[2].ki.wVk = mK;
	arrayKeyBDIn[2].ki.wScan = MapVirtualKey(mK, MAPVK_VK_TO_VSC);
	arrayKeyBDIn[2].ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP;

	arrayKeyBDIn[3].ki.wVk = VK_SHIFT;
	arrayKeyBDIn[3].ki.wScan = MapVirtualKey(VK_SHIFT, MAPVK_VK_TO_VSC);
	arrayKeyBDIn[3].ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;

	SendInput(4, arrayKeyBDIn, sizeof(INPUT));
}

void CppLib::Library::sendSpecial(int mK) {
	INPUT ip;
	int vk = mK;

	ip.type = INPUT_KEYBOARD;
	ip.ki.wScan = 0;
	ip.ki.time = 0;
	ip.ki.dwExtraInfo = 0;

	if (vk == 0)
		return;

	ip.ki.wVk = vk;
	ip.ki.dwFlags = 0;
	Sleep(1);
	SendInput(1, &ip, sizeof(INPUT));

	ip.ki.dwFlags = KEYEVENTF_KEYUP;
	Sleep(1);
	SendInput(1, &ip, sizeof(INPUT));

}
